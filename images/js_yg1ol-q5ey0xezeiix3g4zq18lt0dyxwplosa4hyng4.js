/*!
  * domready (c) Dustin Diaz 2014 - License MIT
  */
!function(e,t){typeof module!="undefined"?module.exports=t():typeof define=="function"&&typeof define.amd=="object"?define(t):this[e]=t()}("domready",function(){var e=[],t,n=document,r=n.documentElement.doScroll,i="DOMContentLoaded",s=(r?/^loaded|^c/:/^loaded|^i|^c/).test(n.readyState);return s||n.addEventListener(i,t=function(){n.removeEventListener(i,t),s=1;while(t=e.shift())t()}),function(t){s?setTimeout(t,0):e.push(t)}});
/**
 * @file
 * Parse inline JSON and initialize the drupalSettings global object.
 */

(function () {

  'use strict';

  // Use direct child elements to harden against XSS exploits when CSP is on.
  var settingsElement = document.querySelector('head > script[type="application/json"][data-drupal-selector="drupal-settings-json"], body > script[type="application/json"][data-drupal-selector="drupal-settings-json"]');

  /**
   * Variable generated by Drupal with all the configuration created from PHP.
   *
   * @global
   *
   * @type {object}
   */
  window.drupalSettings = {};

  if (settingsElement !== null) {
    window.drupalSettings = JSON.parse(settingsElement.textContent);
  }
})();
;
/**
 * @file
 * Defines the Drupal JavaScript API.
 */

/**
 * A jQuery object, typically the return value from a `$(selector)` call.
 *
 * Holds an HTMLElement or a collection of HTMLElements.
 *
 * @typedef {object} jQuery
 *
 * @prop {number} length=0
 *   Number of elements contained in the jQuery object.
 */

/**
 * Variable generated by Drupal that holds all translated strings from PHP.
 *
 * Content of this variable is automatically created by Drupal when using the
 * Interface Translation module. It holds the translation of strings used on
 * the page.
 *
 * This variable is used to pass data from the backend to the frontend. Data
 * contained in `drupalSettings` is used during behavior initialization.
 *
 * @global
 *
 * @var {object} drupalTranslations
 */

/**
 * Global Drupal object.
 *
 * All Drupal JavaScript APIs are contained in this namespace.
 *
 * @global
 *
 * @namespace
 */
window.Drupal = {behaviors: {}, locale: {}};

// Class indicating that JavaScript is enabled; used for styling purpose.
document.documentElement.className += ' js';

// Allow other JavaScript libraries to use $.
if (window.jQuery) {
  jQuery.noConflict();
}

// JavaScript should be made compatible with libraries other than jQuery by
// wrapping it in an anonymous closure.
(function (domready, Drupal, drupalSettings, drupalTranslations) {

  'use strict';

  /**
   * Helper to rethrow errors asynchronously.
   *
   * This way Errors bubbles up outside of the original callstack, making it
   * easier to debug errors in the browser.
   *
   * @param {Error|string} error
   *   The error to be thrown.
   */
  Drupal.throwError = function (error) {
    setTimeout(function () { throw error; }, 0);
  };

  /**
   * Custom error thrown after attach/detach if one or more behaviors failed.
   * Initializes the JavaScript behaviors for page loads and Ajax requests.
   *
   * @callback Drupal~behaviorAttach
   *
   * @param {HTMLDocument|HTMLElement} context
   *   An element to detach behaviors from.
   * @param {?object} settings
   *   An object containing settings for the current context. It is rarely used.
   *
   * @see Drupal.attachBehaviors
   */

  /**
   * Reverts and cleans up JavaScript behavior initialization.
   *
   * @callback Drupal~behaviorDetach
   *
   * @param {HTMLDocument|HTMLElement} context
   *   An element to attach behaviors to.
   * @param {object} settings
   *   An object containing settings for the current context.
   * @param {string} trigger
   *   One of `'unload'`, `'move'`, or `'serialize'`.
   *
   * @see Drupal.detachBehaviors
   */

  /**
   * @typedef {object} Drupal~behavior
   *
   * @prop {Drupal~behaviorAttach} attach
   *   Function run on page load and after an Ajax call.
   * @prop {Drupal~behaviorDetach} detach
   *   Function run when content is serialized or removed from the page.
   */

  /**
   * Holds all initialization methods.
   *
   * @namespace Drupal.behaviors
   *
   * @type {Object.<string, Drupal~behavior>}
   */

  /**
   * Defines a behavior to be run during attach and detach phases.
   *
   * Attaches all registered behaviors to a page element.
   *
   * Behaviors are event-triggered actions that attach to page elements,
   * enhancing default non-JavaScript UIs. Behaviors are registered in the
   * {@link Drupal.behaviors} object using the method 'attach' and optionally
   * also 'detach'.
   *
   * {@link Drupal.attachBehaviors} is added below to the `jQuery.ready` event
   * and therefore runs on initial page load. Developers implementing Ajax in
   * their solutions should also call this function after new page content has
   * been loaded, feeding in an element to be processed, in order to attach all
   * behaviors to the new content.
   *
   * Behaviors should use `var elements =
   * $(context).find(selector).once('behavior-name');` to ensure the behavior is
   * attached only once to a given element. (Doing so enables the reprocessing
   * of given elements, which may be needed on occasion despite the ability to
   * limit behavior attachment to a particular element.)
   *
   * @example
   * Drupal.behaviors.behaviorName = {
   *   attach: function (context, settings) {
   *     // ...
   *   },
   *   detach: function (context, settings, trigger) {
   *     // ...
   *   }
   * };
   *
   * @param {HTMLDocument|HTMLElement} [context=document]
   *   An element to attach behaviors to.
   * @param {object} [settings=drupalSettings]
   *   An object containing settings for the current context. If none is given,
   *   the global {@link drupalSettings} object is used.
   *
   * @see Drupal~behaviorAttach
   * @see Drupal.detachBehaviors
   *
   * @throws {Drupal~DrupalBehaviorError}
   */
  Drupal.attachBehaviors = function (context, settings) {
    context = context || document;
    settings = settings || drupalSettings;
    var behaviors = Drupal.behaviors;
    // Execute all of them.
    for (var i in behaviors) {
      if (behaviors.hasOwnProperty(i) && typeof behaviors[i].attach === 'function') {
        // Don't stop the execution of behaviors in case of an error.
        try {
          behaviors[i].attach(context, settings);
        }
        catch (e) {
          Drupal.throwError(e);
        }
      }
    }
  };

  // Attach all behaviors.
  domready(function () { Drupal.attachBehaviors(document, drupalSettings); });

  /**
   * Detaches registered behaviors from a page element.
   *
   * Developers implementing Ajax in their solutions should call this function
   * before page content is about to be removed, feeding in an element to be
   * processed, in order to allow special behaviors to detach from the content.
   *
   * Such implementations should use `.findOnce()` and `.removeOnce()` to find
   * elements with their corresponding `Drupal.behaviors.behaviorName.attach`
   * implementation, i.e. `.removeOnce('behaviorName')`, to ensure the behavior
   * is detached only from previously processed elements.
   *
   * @param {HTMLDocument|HTMLElement} [context=document]
   *   An element to detach behaviors from.
   * @param {object} [settings=drupalSettings]
   *   An object containing settings for the current context. If none given,
   *   the global {@link drupalSettings} object is used.
   * @param {string} [trigger='unload']
   *   A string containing what's causing the behaviors to be detached. The
   *   possible triggers are:
   *   - `'unload'`: The context element is being removed from the DOM.
   *   - `'move'`: The element is about to be moved within the DOM (for example,
   *     during a tabledrag row swap). After the move is completed,
   *     {@link Drupal.attachBehaviors} is called, so that the behavior can undo
   *     whatever it did in response to the move. Many behaviors won't need to
   *     do anything simply in response to the element being moved, but because
   *     IFRAME elements reload their "src" when being moved within the DOM,
   *     behaviors bound to IFRAME elements (like WYSIWYG editors) may need to
   *     take some action.
   *   - `'serialize'`: When an Ajax form is submitted, this is called with the
   *     form as the context. This provides every behavior within the form an
   *     opportunity to ensure that the field elements have correct content
   *     in them before the form is serialized. The canonical use-case is so
   *     that WYSIWYG editors can update the hidden textarea to which they are
   *     bound.
   *
   * @throws {Drupal~DrupalBehaviorError}
   *
   * @see Drupal~behaviorDetach
   * @see Drupal.attachBehaviors
   */
  Drupal.detachBehaviors = function (context, settings, trigger) {
    context = context || document;
    settings = settings || drupalSettings;
    trigger = trigger || 'unload';
    var behaviors = Drupal.behaviors;
    // Execute all of them.
    for (var i in behaviors) {
      if (behaviors.hasOwnProperty(i) && typeof behaviors[i].detach === 'function') {
        // Don't stop the execution of behaviors in case of an error.
        try {
          behaviors[i].detach(context, settings, trigger);
        }
        catch (e) {
          Drupal.throwError(e);
        }
      }
    }
  };

  /**
   * Encodes special characters in a plain-text string for display as HTML.
   *
   * @param {string} str
   *   The string to be encoded.
   *
   * @return {string}
   *   The encoded string.
   *
   * @ingroup sanitization
   */
  Drupal.checkPlain = function (str) {
    str = str.toString()
      .replace(/&/g, '&amp;')
      .replace(/"/g, '&quot;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
    return str;
  };

  /**
   * Replaces placeholders with sanitized values in a string.
   *
   * @param {string} str
   *   A string with placeholders.
   * @param {object} args
   *   An object of replacements pairs to make. Incidences of any key in this
   *   array are replaced with the corresponding value. Based on the first
   *   character of the key, the value is escaped and/or themed:
   *    - `'!variable'`: inserted as is.
   *    - `'@variable'`: escape plain text to HTML ({@link Drupal.checkPlain}).
   *    - `'%variable'`: escape text and theme as a placeholder for user-
   *      submitted content ({@link Drupal.checkPlain} +
   *      `{@link Drupal.theme}('placeholder')`).
   *
   * @return {string}
   *   The formatted string.
   *
   * @see Drupal.t
   */
  Drupal.formatString = function (str, args) {
    // Keep args intact.
    var processedArgs = {};
    // Transform arguments before inserting them.
    for (var key in args) {
      if (args.hasOwnProperty(key)) {
        switch (key.charAt(0)) {
          // Escaped only.
          case '@':
            processedArgs[key] = Drupal.checkPlain(args[key]);
            break;

          // Pass-through.
          case '!':
            processedArgs[key] = args[key];
            break;

          // Escaped and placeholder.
          default:
            processedArgs[key] = Drupal.theme('placeholder', args[key]);
            break;
        }
      }
    }

    return Drupal.stringReplace(str, processedArgs, null);
  };

  /**
   * Replaces substring.
   *
   * The longest keys will be tried first. Once a substring has been replaced,
   * its new value will not be searched again.
   *
   * @param {string} str
   *   A string with placeholders.
   * @param {object} args
   *   Key-value pairs.
   * @param {Array|null} keys
   *   Array of keys from `args`. Internal use only.
   *
   * @return {string}
   *   The replaced string.
   */
  Drupal.stringReplace = function (str, args, keys) {
    if (str.length === 0) {
      return str;
    }

    // If the array of keys is not passed then collect the keys from the args.
    if (!Array.isArray(keys)) {
      keys = [];
      for (var k in args) {
        if (args.hasOwnProperty(k)) {
          keys.push(k);
        }
      }

      // Order the keys by the character length. The shortest one is the first.
      keys.sort(function (a, b) { return a.length - b.length; });
    }

    if (keys.length === 0) {
      return str;
    }

    // Take next longest one from the end.
    var key = keys.pop();
    var fragments = str.split(key);

    if (keys.length) {
      for (var i = 0; i < fragments.length; i++) {
        // Process each fragment with a copy of remaining keys.
        fragments[i] = Drupal.stringReplace(fragments[i], args, keys.slice(0));
      }
    }

    return fragments.join(args[key]);
  };

  /**
   * Translates strings to the page language, or a given language.
   *
   * See the documentation of the server-side t() function for further details.
   *
   * @param {string} str
   *   A string containing the English text to translate.
   * @param {Object.<string, string>} [args]
   *   An object of replacements pairs to make after translation. Incidences
   *   of any key in this array are replaced with the corresponding value.
   *   See {@link Drupal.formatString}.
   * @param {object} [options]
   *   Additional options for translation.
   * @param {string} [options.context='']
   *   The context the source string belongs to.
   *
   * @return {string}
   *   The formatted string.
   *   The translated string.
   */
  Drupal.t = function (str, args, options) {
    options = options || {};
    options.context = options.context || '';

    // Fetch the localized version of the string.
    if (typeof drupalTranslations !== 'undefined' && drupalTranslations.strings && drupalTranslations.strings[options.context] && drupalTranslations.strings[options.context][str]) {
      str = drupalTranslations.strings[options.context][str];
    }

    if (args) {
      str = Drupal.formatString(str, args);
    }
    return str;
  };

  /**
   * Returns the URL to a Drupal page.
   *
   * @param {string} path
   *   Drupal path to transform to URL.
   *
   * @return {string}
   *   The full URL.
   */
  Drupal.url = function (path) {
    return drupalSettings.path.baseUrl + drupalSettings.path.pathPrefix + path;
  };

  /**
   * Returns the passed in URL as an absolute URL.
   *
   * @param {string} url
   *   The URL string to be normalized to an absolute URL.
   *
   * @return {string}
   *   The normalized, absolute URL.
   *
   * @see https://github.com/angular/angular.js/blob/v1.4.4/src/ng/urlUtils.js
   * @see https://grack.com/blog/2009/11/17/absolutizing-url-in-javascript
   * @see https://github.com/jquery/jquery-ui/blob/1.11.4/ui/tabs.js#L53
   */
  Drupal.url.toAbsolute = function (url) {
    var urlParsingNode = document.createElement('a');

    // Decode the URL first; this is required by IE <= 6. Decoding non-UTF-8
    // strings may throw an exception.
    try {
      url = decodeURIComponent(url);
    }
    catch (e) {
      // Empty.
    }

    urlParsingNode.setAttribute('href', url);

    // IE <= 7 normalizes the URL when assigned to the anchor node similar to
    // the other browsers.
    return urlParsingNode.cloneNode(false).href;
  };

  /**
   * Returns true if the URL is within Drupal's base path.
   *
   * @param {string} url
   *   The URL string to be tested.
   *
   * @return {bool}
   *   `true` if local.
   *
   * @see https://github.com/jquery/jquery-ui/blob/1.11.4/ui/tabs.js#L58
   */
  Drupal.url.isLocal = function (url) {
    // Always use browser-derived absolute URLs in the comparison, to avoid
    // attempts to break out of the base path using directory traversal.
    var absoluteUrl = Drupal.url.toAbsolute(url);
    var protocol = location.protocol;

    // Consider URLs that match this site's base URL but use HTTPS instead of HTTP
    // as local as well.
    if (protocol === 'http:' && absoluteUrl.indexOf('https:') === 0) {
      protocol = 'https:';
    }
    var baseUrl = protocol + '//' + location.host + drupalSettings.path.baseUrl.slice(0, -1);

    // Decoding non-UTF-8 strings may throw an exception.
    try {
      absoluteUrl = decodeURIComponent(absoluteUrl);
    }
    catch (e) {
      // Empty.
    }
    try {
      baseUrl = decodeURIComponent(baseUrl);
    }
    catch (e) {
      // Empty.
    }

    // The given URL matches the site's base URL, or has a path under the site's
    // base URL.
    return absoluteUrl === baseUrl || absoluteUrl.indexOf(baseUrl + '/') === 0;
  };

  /**
   * Formats a string containing a count of items.
   *
   * This function ensures that the string is pluralized correctly. Since
   * {@link Drupal.t} is called by this function, make sure not to pass
   * already-localized strings to it.
   *
   * See the documentation of the server-side
   * \Drupal\Core\StringTranslation\TranslationInterface::formatPlural()
   * function for more details.
   *
   * @param {number} count
   *   The item count to display.
   * @param {string} singular
   *   The string for the singular case. Please make sure it is clear this is
   *   singular, to ease translation (e.g. use "1 new comment" instead of "1
   *   new"). Do not use @count in the singular string.
   * @param {string} plural
   *   The string for the plural case. Please make sure it is clear this is
   *   plural, to ease translation. Use @count in place of the item count, as in
   *   "@count new comments".
   * @param {object} [args]
   *   An object of replacements pairs to make after translation. Incidences
   *   of any key in this array are replaced with the corresponding value.
   *   See {@link Drupal.formatString}.
   *   Note that you do not need to include @count in this array.
   *   This replacement is done automatically for the plural case.
   * @param {object} [options]
   *   The options to pass to the {@link Drupal.t} function.
   *
   * @return {string}
   *   A translated string.
   */
  Drupal.formatPlural = function (count, singular, plural, args, options) {
    args = args || {};
    args['@count'] = count;

    var pluralDelimiter = drupalSettings.pluralDelimiter;
    var translations = Drupal.t(singular + pluralDelimiter + plural, args, options).split(pluralDelimiter);
    var index = 0;

    // Determine the index of the plural form.
    if (typeof drupalTranslations !== 'undefined' && drupalTranslations.pluralFormula) {
      index = count in drupalTranslations.pluralFormula ? drupalTranslations.pluralFormula[count] : drupalTranslations.pluralFormula['default'];
    }
    else if (args['@count'] !== 1) {
      index = 1;
    }

    return translations[index];
  };

  /**
   * Encodes a Drupal path for use in a URL.
   *
   * For aesthetic reasons slashes are not escaped.
   *
   * @param {string} item
   *   Unencoded path.
   *
   * @return {string}
   *   The encoded path.
   */
  Drupal.encodePath = function (item) {
    return window.encodeURIComponent(item).replace(/%2F/g, '/');
  };

  /**
   * Generates the themed representation of a Drupal object.
   *
   * All requests for themed output must go through this function. It examines
   * the request and routes it to the appropriate theme function. If the current
   * theme does not provide an override function, the generic theme function is
   * called.
   *
   * @example
   * <caption>To retrieve the HTML for text that should be emphasized and
   * displayed as a placeholder inside a sentence.</caption>
   * Drupal.theme('placeholder', text);
   *
   * @namespace
   *
   * @param {function} func
   *   The name of the theme function to call.
   * @param {...args}
   *   Additional arguments to pass along to the theme function.
   *
   * @return {string|object|HTMLElement|jQuery}
   *   Any data the theme function returns. This could be a plain HTML string,
   *   but also a complex object.
   */
  Drupal.theme = function (func) {
    var args = Array.prototype.slice.apply(arguments, [1]);
    if (func in Drupal.theme) {
      return Drupal.theme[func].apply(this, args);
    }
  };

  /**
   * Formats text for emphasized display in a placeholder inside a sentence.
   *
   * @param {string} str
   *   The text to format (plain-text).
   *
   * @return {string}
   *   The formatted text (html).
   */
  Drupal.theme.placeholder = function (str) {
    return '<em class="placeholder">' + Drupal.checkPlain(str) + '</em>';
  };

})(domready, Drupal, window.drupalSettings, window.drupalTranslations);
;
/**
 * @file
 * Provides CrazyEgg script.
 */

(function (drupalSettings) {

  setTimeout(
    function () {
      var a = document.createElement("script");
      var b = document.getElementsByTagName('script')[0];

      a.src = document.location.protocol +
      "//script.crazyegg.com/" + drupalSettings.crazyegg.crazyegg.account_path +
      "?" + Math.floor(new Date().getTime() / 3600000);
      a.async = true;
      a.type = "text/javascript";
      b.parentNode.insertBefore(a, b)
    }, 1
  );
})(drupalSettings);
;
/**
 * @file Common data layer helper.
 */

(function ($) {
  Drupal.behaviors.dataLayer = {

    /**
     * The language prefix list (no blank).
     *
     * @return {array}
     */
    langPrefixes: function langPrefixes() {
      var languages = Drupal.settings.dataLayer.languages,
          langList = [];

      for (var lang in languages) {
        if (languages[lang].prefix !== '') {
          langList.push(languages[lang].prefix);
        }
      }
      return langList;

      // With Underscore.js dependency.
      //var list = _.pluck(Drupal.settings.datalayer.languages, 'prefix');
      //return _.filter(list, function(lang) { return lang });
    },

    /**
     * Drupal behavior.
     */
    attach: function() { return }

  };
})(jQuery);
;
/**
 * @file
 * Common JS for google custom search HEADER + MOBILE forms (loads globally)
 * Note overlap with customization of search input in mass_search.results.js.
 * Using Mass.gov custom search engine at cse.google.com
 * - api v1 js code
 * - search results page JS in mass_search.results.js
 */
(function () {
  'use strict';

  // ****** Mobile Search button should open mobile menu ******
  var mobileSearchButton = document.querySelector('.ma__header__search .ma__header-search .ma__button-search');

  if (mobileSearchButton !== null) {
    mobileSearchButton.addEventListener('click', function (event) {
      event.preventDefault();
      document.querySelector('body').classList.toggle('show-menu');
    });
  }

  if (window.google) {

    /**
     * load the google custom search module
     * - with english language
     * - with minimalist theme
     */
    google.load('search', '1', {language: 'en', nocss: true});

    /** setOnLoadCallback(callback, @BOOLEAN runOnDomLoad) */
    google.setOnLoadCallback(function () {

      /* search engine id */
      var cx = '010551267445528504028:ivl9x2rf5e8';

      /* placeholders */
      var longPlaceholder = 'What can we help you find?';
      var shortPlaceholder = 'Search...';

      /* set string for message when no results are returned */
      var noResultsString = 'Sorry, we couldn\'t find any results for your query.  Please try searching with different words.';

      /**
       * Set custom search options
       * See: https://developers.google.com/custom-search/docs/js/cselement-reference#opt_options
       */
      var customSearchOptions = {};

      /** autocomplete settings */
      var autoCompleteOptions = {
        maxCompletions: 3
      };
      customSearchOptions['autoCompleteOptions'] = autoCompleteOptions;

      // Utility function to customize search form produced by Google.
      function customizeForm(searchForm, placeholderText, formClassNames, inputClassNames) {
        // Search form classes.
        var i;
        for (i = 0; i < formClassNames.length; i++) {
          searchForm.classList.add(formClassNames[i]);
        }
        // Input box customization.
        var inputField = searchForm.querySelector('input.gsc-input');
        for (i = 0; i < inputClassNames.length; i++) {
          inputField.classList.add(inputClassNames[i]);
        }
        inputField.placeholder = placeholderText;
        // Add label to search input for accessiblity.
        var slabel = document.createElement('label');
        slabel.textContent = 'Search';
        slabel.classList.add('hidden');
        slabel.setAttribute('for', inputField.id);
        var inputCell = searchForm.querySelector('td.gsc-input');
        inputCell.insertBefore(slabel, inputField);
      }

      /** HEADER SEARCH FORM */

      /**
       * Creates an instance of the CustomSearchControl object,
       * which represents a Custom Search Element. Calling this
       * constructor initializes the Custom Search service and UI.
       */
      var headerSearchControl = new google.search.CustomSearchControl(cx, customSearchOptions);

      /**
       * set search results set size
       * options:
       * - integer between 1-20,
       * - google.search.Search. SMALL||LARGE _RESULTSET (google determines usually 8||16)
       * - google.search.Search.FILETERED_CSE_RESULTSET (google determines, up to 10results, 10 pages)
       */
      headerSearchControl.setResultSetSize(20);

      /**
       * Draw header search form with draw options
       * See .draw() at: https://developers.google.com/custom-search/docs/js/cselement-reference#csedrawoptions-el
       */
      var headerOptions = new google.search.DrawOptions();

      /**
       * only draw search form (results are handled in mass_search
       * module route teamplte mass-search.html.twig )
       *
       * set search results route and search term query
       */
      headerOptions.enableSearchboxOnly('/search', 'q');

      /**
       * enable autocomplete (see options above: autoCompleteOptions)
       */
      headerOptions.setAutoComplete(true);

      /**
       * Displays the search form (when it exists, IE not on results page).
       * Calling this method is the final step in activating a Custom Search
       * Element object, and it produces the UI and search containers.
       *
       * .draw(selector, options)
       */
      var headerSearchExists = document.getElementById('cse-header-search-form');

      if (headerSearchExists) {
        headerSearchControl.draw('cse-header-search-form', headerOptions);
        customizeForm(document.querySelector('#cse-header-search-form form'), longPlaceholder, ['ma__form', 'js-header-search-form'], ['ma__header-search__input']);
      }

      // Customize "no results" message
      headerSearchControl.setNoResultsString(noResultsString);

      /** MOBILE SEARCH FORM */

      /**
       * Creates an instance of the CustomSearchControl object,
       * which represents a Custom Search Element. Calling this
       * constructor initializes the Custom Search service and UI.
       */
      var mobileSearchControl = new google.search.CustomSearchControl(cx, customSearchOptions);

      /**
       * set search results set size
       * options:
       * - integer between 1-20,
       * - google.search.Search. SMALL||LARGE _RESULTSET (google determines usually 8||16)
       * - google.search.Search.FILETERED_CSE_RESULTSET (google determines, up to 10results, 10 pages)
       */
      mobileSearchControl.setResultSetSize(20);

      /**
       * Draw mobile search form with draw options
       * See .draw() at: https://developers.google.com/custom-search/docs/js/cselement-reference#csedrawoptions-el
       */
      var mobileOptions = new google.search.DrawOptions();

      /**
       * only draw search form (results are handled in mass_search
       * module route teamplte mass-search.html.twig )
       *
       * set search results route and search term query
       */
      mobileOptions.enableSearchboxOnly('/search', 'q');

      /**
       * enable autocomplete (see options above: autoCompleteOptions)
       */

      mobileOptions.setAutoComplete(true);

      /**
       * Displays the search form. Calling this method is the final step
       * in activating a Custom Search Element object, and it produces the
       * UI and search containers.
       *
       * .draw(selector, options)
       */
      mobileSearchControl.draw('cse-search-form-mobile', mobileOptions);

      // Customize "no results" message
      mobileSearchControl.setNoResultsString(noResultsString);

      // Customize the form
      customizeForm(document.querySelector('#cse-search-form-mobile form'), shortPlaceholder, ['ma__form'], []);

        /**
       * Creates an instance of the CustomSearchControl object,
       * which represents a Custom Search Element. Calling this
       * constructor initializes the Custom Search service and UI.
       */
      var searchBandSearchControl = new google.search.CustomSearchControl(cx, customSearchOptions);

      /**
       * set search results set size
       * options:
       * - integer between 1-20,
       * - google.search.Search. SMALL||LARGE _RESULTSET (google determines usually 8||16)
       * - google.search.Search.FILETERED_CSE_RESULTSET (google determines, up to 10results, 10 pages)
       */
      searchBandSearchControl.setResultSetSize(20);

      /**
       * Draw header search form with draw options
       * See .draw() at: https://developers.google.com/custom-search/docs/js/cselement-reference#csedrawoptions-el
       */
      var searchBandOptions = new google.search.DrawOptions();

      /**
       * only draw search form (results are handled in mass_search
       * module route teamplte mass-search.html.twig )
       *
       * set search results route and search term query
       */
      searchBandOptions.enableSearchboxOnly('/search', 'q');

      /**
       * enable autocomplete (see options above: autoCompleteOptions)
       */
      searchBandOptions.setAutoComplete(true);

      /**
       * Displays the search form (when it exists, IE not on results page).
       * Calling this method is the final step in activating a Custom Search
       * Element object, and it produces the UI and search containers.
       *
       * .draw(selector, options)
       */
      var searchBandSearchExists = document.getElementById('cse-search-band-search-form');

      if (searchBandSearchExists) {
        searchBandSearchControl.draw('cse-search-band-search-form', searchBandOptions);
      }

      // Customize "no results" message
      searchBandSearchControl.setNoResultsString(noResultsString);

      // Remove class on form for search banner <form>.
      var bannerSearchForm = document.querySelector('.ma__search-banner form.gsc-search-box');
      if (bannerSearchForm !== null) {
        // Add standard customizations to form: hidden label and placeholder.
        customizeForm(bannerSearchForm, shortPlaceholder, [], []);
        bannerSearchForm.classList.remove('gsc-search-box');
      }

      // Add classes to form parent for search banner <form>.
      var bannerSearchFormParent = document.querySelector('#cse-search-band-search-form');
      if (bannerSearchFormParent !== null) {
        bannerSearchFormParent.classList.add('ma__search-banner__form');
      }

      // Add classes to <input>.
      var bannerInputField = document.querySelector('.ma__search-banner td.gsc-input');
      if (bannerInputField !== null) {
        bannerInputField.classList.add('ma__search-banner__input');
        var bannerTextInput = document.querySelector('.ma__search-banner td.gsc-input input');
        bannerTextInput.classList.remove('gsc-input');
      }

      // Add classes to <button>.
      var bannerSubmitField = document.querySelector('.ma__search-banner td.gsc-search-button');
      if (bannerSubmitField !== null) {
        var bannerSubmitInput = document.querySelector('.ma__search-banner td.gsc-search-button input');
        bannerSubmitField.classList.add('ma__search-banner__button');
        bannerSubmitField.classList.remove('gsc-search-button');
        bannerSubmitInput.placeholder = 'Search...';
      }

    }, true);
  }
}());
;
/**
 * @file
 * Adapted from underscore.js with the addition Drupal namespace.
 */

/**
 * Limits the invocations of a function in a given time frame.
 *
 * The debounce function wrapper should be used sparingly. One clear use case
 * is limiting the invocation of a callback attached to the window resize event.
 *
 * Before using the debounce function wrapper, consider first whether the
 * callback could be attached to an event that fires less frequently or if the
 * function can be written in such a way that it is only invoked under specific
 * conditions.
 *
 * @param {function} func
 *   The function to be invoked.
 * @param {number} wait
 *   The time period within which the callback function should only be
 *   invoked once. For example if the wait period is 250ms, then the callback
 *   will only be called at most 4 times per second.
 * @param {bool} immediate
 *   Whether we wait at the beginning or end to execute the function.
 *
 * @return {function}
 *   The debounced function.
 */
Drupal.debounce = function (func, wait, immediate) {

  'use strict';

  var timeout;
  var result;
  return function () {
    var context = this;
    var args = arguments;
    var later = function () {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
      }
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
    }
    return result;
  };
};
;
/**
 * @file
 * Adds an HTML element and method to trigger audio UAs to read system messages.
 *
 * Use {@link Drupal.announce} to indicate to screen reader users that an
 * element on the page has changed state. For instance, if clicking a link
 * loads 10 more items into a list, one might announce the change like this.
 *
 * @example
 * $('#search-list')
 *   .on('itemInsert', function (event, data) {
 *     // Insert the new items.
 *     $(data.container.el).append(data.items.el);
 *     // Announce the change to the page contents.
 *     Drupal.announce(Drupal.t('@count items added to @container',
 *       {'@count': data.items.length, '@container': data.container.title}
 *     ));
 *   });
 */

(function (Drupal, debounce) {

  'use strict';

  var liveElement;
  var announcements = [];

  /**
   * Builds a div element with the aria-live attribute and add it to the DOM.
   *
   * @type {Drupal~behavior}
   *
   * @prop {Drupal~behaviorAttach} attach
   *   Attaches the behavior for drupalAnnouce.
   */
  Drupal.behaviors.drupalAnnounce = {
    attach: function (context) {
      // Create only one aria-live element.
      if (!liveElement) {
        liveElement = document.createElement('div');
        liveElement.id = 'drupal-live-announce';
        liveElement.className = 'visually-hidden';
        liveElement.setAttribute('aria-live', 'polite');
        liveElement.setAttribute('aria-busy', 'false');
        document.body.appendChild(liveElement);
      }
    }
  };

  /**
   * Concatenates announcements to a single string; appends to the live region.
   */
  function announce() {
    var text = [];
    var priority = 'polite';
    var announcement;

    // Create an array of announcement strings to be joined and appended to the
    // aria live region.
    var il = announcements.length;
    for (var i = 0; i < il; i++) {
      announcement = announcements.pop();
      text.unshift(announcement.text);
      // If any of the announcements has a priority of assertive then the group
      // of joined announcements will have this priority.
      if (announcement.priority === 'assertive') {
        priority = 'assertive';
      }
    }

    if (text.length) {
      // Clear the liveElement so that repeated strings will be read.
      liveElement.innerHTML = '';
      // Set the busy state to true until the node changes are complete.
      liveElement.setAttribute('aria-busy', 'true');
      // Set the priority to assertive, or default to polite.
      liveElement.setAttribute('aria-live', priority);
      // Print the text to the live region. Text should be run through
      // Drupal.t() before being passed to Drupal.announce().
      liveElement.innerHTML = text.join('\n');
      // The live text area is updated. Allow the AT to announce the text.
      liveElement.setAttribute('aria-busy', 'false');
    }
  }

  /**
   * Triggers audio UAs to read the supplied text.
   *
   * The aria-live region will only read the text that currently populates its
   * text node. Replacing text quickly in rapid calls to announce results in
   * only the text from the most recent call to {@link Drupal.announce} being
   * read. By wrapping the call to announce in a debounce function, we allow for
   * time for multiple calls to {@link Drupal.announce} to queue up their
   * messages. These messages are then joined and append to the aria-live region
   * as one text node.
   *
   * @param {string} text
   *   A string to be read by the UA.
   * @param {string} [priority='polite']
   *   A string to indicate the priority of the message. Can be either
   *   'polite' or 'assertive'.
   *
   * @return {function}
   *   The return of the call to debounce.
   *
   * @see http://www.w3.org/WAI/PF/aria-practices/#liveprops
   */
  Drupal.announce = function (text, priority) {
    // Save the text and priority into a closure variable. Multiple simultaneous
    // announcements will be concatenated and read in sequence.
    announcements.push({
      text: text,
      priority: priority
    });
    // Immediately invoke the function that debounce returns. 200 ms is right at
    // the cusp where humans notice a pause, so we will wait
    // at most this much time before the set of queued announcements is read.
    return (debounce(announce, 200)());
  };
}(Drupal, Drupal.debounce));
;
/*!
 * jQuery Once v2.1.3 - http://github.com/robloach/jquery-once
 * @license MIT, GPL-2.0
 *   http://opensource.org/licenses/MIT
 *   http://opensource.org/licenses/GPL-2.0
 */
(function(e){"use strict";if(typeof exports==="object"){e(require("jquery"))}else if(typeof define==="function"&&define.amd){define(["jquery"],e)}else{e(jQuery)}})(function(e){"use strict";var n=function(e){e=e||"once";if(typeof e!=="string"){throw new Error("The jQuery Once id parameter must be a string")}return e};e.fn.once=function(t){var r="jquery-once-"+n(t);return this.filter(function(){return e(this).data(r)!==true}).data(r,true)};e.fn.removeOnce=function(e){return this.findOnce(e).removeData("jquery-once-"+n(e))};e.fn.findOnce=function(t){var r="jquery-once-"+n(t);return this.filter(function(){return e(this).data(r)===true})}});

var themePath = '/themes/custom/mass_theme';
;
!function e(t,n,o){function s(a,r){if(!n[a]){if(!t[a]){var l="function"==typeof require&&require;if(!r&&l)return l(a,!0);if(i)return i(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var d=n[a]={exports:{}};t[a][0].call(d.exports,function(e){var n=t[a][1][e];return s(n?n:e)},d,d.exports,e,t,n,o)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<o.length;a++)s(o[a]);return s}({1:[function(e,t,n){"use strict";t.exports=function(e,t,n){function o(e,n,o){if("number"==typeof o){var s=new Date;s.setTime(s.getTime()+24*o*60*60*1e3);var o="expires="+s.toUTCString();t.cookie=e+"="+n+"; "+o+"; path=/"}else t.cookie=e+"="+n+"; path=/"}function s(e){var n="; "+t.cookie,o=n.split("; "+e+"=");if(2==o.length)return o.pop().split(";").shift()}return{setCookie:o,getCookie:s}}(window,document)},{}],2:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=function(e){var t="true";try{t=window.getComputedStyle(e[0],":before").getPropertyValue("content").replace(/\"/g,"")}catch(n){}return"false"!==t},t.exports=n["default"]},{}],3:[function(e,t,n){"use strict";t.exports=function(e){return void 0!==Handlebars.templates&&void 0!==Handlebars.templates[e]||jQuery.ajax({url:themePath+"/js/templates/"+e+".html",success:function(t){void 0===Handlebars.templates&&(Handlebars.templates={}),Handlebars.templates[e]=Handlebars.compile(t)},async:!1}),Handlebars.templates[e]}},{}],4:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var s=e("../helpers/cssControlCode.js"),i=o(s);n["default"]=function(e,t,n,o){function s(t){l=t,u="relative"===l.parent().css("position")?l.parent():l.parent().offsetParent(),l.attr("data-sticky","top"),a(),e.setTimeout(function(){a()},1e3),n(e).resize(function(){a(),r()}),n(e).scroll(function(){r()})}function a(){var e=(0,i["default"])(l);v&&!e&&l.removeAttr("style"),v=e,v&&(v=e,d=l.height(),c=u.width(),p=u.offset().top,f=p+u.outerHeight(!0)-l.height(),l.width(c))}function r(){if(!v)return l.attr("data-sticky","top"),!1;var t=n(e).scrollTop(),o=l.attr("data-sticky"),s="top"!==o&&t<=p,i="middle"!==o&&t<f&&t>p,a="bottom"!==o&&t>=f;s?l.attr("data-sticky","top"):i?l.attr("data-sticky","middle"):a&&l.attr("data-sticky","bottom")}var l=o,u=o,d=o,c=o,f=o,p=o,v=!1;return{init:s}}(window,document,jQuery),t.exports=n["default"]},{"../helpers/cssControlCode.js":2}],5:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}var s=e("./modules/accordions.js"),i=(o(s),e("./modules/googleMap.js")),a=(o(i),e("./modules/back2top.js")),r=(o(a),e("./modules/bannerCarousel.js")),l=(o(r),e("./modules/clickable.js")),u=(o(l),e("./modules/dropdown.js")),d=(o(u),e("./modules/emergencyAlerts.js")),c=(o(d),e("./modules/formValidation.js")),f=(o(c),e("./modules/hideAlert.js")),p=(o(f),e("./modules/keywordSearch.js")),v=(o(p),e("./modules/locationListing.js")),m=(o(v),e("./modules/mainNav.js")),h=(o(m),e("./modules/mainNavPilot.js")),j=(o(h),e("./modules/mobileNav.js")),y=(o(j),e("./modules/responsiveVideo.js")),g=(o(y),e("./modules/richText.js")),k=(o(g),e("./modules/scrollAnchors.js")),b=(o(k),e("./modules/utilNav.js"));o(b)},{"./modules/accordions.js":6,"./modules/back2top.js":7,"./modules/bannerCarousel.js":8,"./modules/clickable.js":9,"./modules/dropdown.js":10,"./modules/emergencyAlerts.js":11,"./modules/formValidation.js":12,"./modules/googleMap.js":13,"./modules/hideAlert.js":14,"./modules/keywordSearch.js":15,"./modules/locationListing.js":16,"./modules/mainNav.js":17,"./modules/mainNavPilot.js":18,"./modules/mobileNav.js":19,"./modules/responsiveVideo.js":20,"./modules/richText.js":21,"./modules/scrollAnchors.js":22,"./modules/utilNav.js":23}],6:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var s=e("../helpers/cssControlCode.js"),i=o(s);n["default"]=function(e,t,n,o){n(".js-accordion").each(function(){var t=n(this),o=t.find(".js-accordion-link"),s=t.find(".js-accordion-content"),a=(0,i["default"])(t),r=t.hasClass("is-open");t.attr("aria-expanded",r),r&&s.stop(!0,!0).slideDown(),o.on("click",function(e){a&&(e.preventDefault(),r=t.hasClass("is-open"),r?s.stop(!0,!0).slideUp():s.stop(!0,!0).slideDown(),t.attr("aria-expanded",!r).toggleClass("is-open"))}),n(e).resize(function(){var e=(0,i["default"])(t);e===a||e||(s.removeAttr("style"),t.removeClass("is-open"),t.attr("aria-expanded","false")),a=e}).resize()})}(window,document,jQuery),t.exports=n["default"]},{"../helpers/cssControlCode.js":2}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=function(e,t,n,o){var s=(n(".js-footer"),250);n(".js-back2top").each(function(){var t=n(this);t.on("click",function(e){e.preventDefault();try{n("html, body").stop(!0,!0).animate({scrollTop:0},"750")}catch(e){n("body").scrollTop(0)}return n("#main-content").focus(),!1}),n(e).on("scroll",function(){var o=n(e).scrollTop();o>s?t.removeClass("is-hidden"):t.addClass("is-hidden")})})}(window,document,jQuery),t.exports=n["default"]},{}],8:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=function(e,t,n,o){n(".js-banner-carousel").each(function(){var e=n(this);if(!(e.children().length<=1)){e.slick({dots:!0,prevArrow:'<button type="button" class="slick-prev"></button>',nextArrow:'<button type="button" class="slick-next"></button>'})}})}(window,document,jQuery),t.exports=n["default"]},{}],9:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=function(e,t,n,o){n(".js-clickable").each(function(){n(this).click(function(t){t.preventDefault();var o=n(this).find(".js-clickable-link").first(),s=o.attr("href");"_blank"===o.attr("target")?e.open(s):e.location=s})})}(window,document,jQuery),t.exports=n["default"]},{}],10:[function(e,t,n){"use strict";var o=document.querySelectorAll(".js-dropdown");if(null!==o)for(var s=o.length,i=function(e){var t=o[e],n=t.querySelector(".js-dropdown-select"),s=t.querySelector(".js-dropdown-link");return null===n||null===s?"break":void(n.onchange=function(){var e="undefined"==typeof this.selectedIndex?window.event.srcElement:this;s.innerText=e.text||e.options[e.selectedIndex].text})},a=0;a<s;a++){var r=i(a);if("break"===r)break}},{}],11:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var s=e("../helpers/cookies.js"),i=o(s);n["default"]=function(e,t,n,o){n(".js-emergency-alerts").each(function(){var e=n(this),t=!0,o=e.data("id"),s="emergency-alerts"+o,a=i["default"].getCookie(s),r=e.find(".js-accordion-link button");r.on("click",function(){t=!t,i["default"].setCookie(s,t)}),"undefined"!=typeof a&&"false"===a&&(t=!1,r.attr("aria-expanded",t)),t&&(t=!1,r.first().trigger("click"))})}(window,document,jQuery),t.exports=n["default"]},{"../helpers/cookies.js":1}],12:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=function(e,t,n,o){function s(e){var t=arguments.length<=1||arguments[1]===o?"text":arguments[1],n=!1;switch(t){case"email":n=!!e.match(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]+/i);break;default:n=0!==e.length}return n}n("form").each(function(){var e=n(this),t=[];n(".js-is-required").each(function(){var e=n(this),o=e.data("type"),i=e.val(),a=s(i,o);t.push({type:o,valid:a,$el:e}),n(this).data("index",t.length)}),0!==t.length&&e.on("submit",function(n){var o=!0;t.forEach(function(e){var t=e.$el.val();e.valid=s(t,e.type),e.valid?e.$el.attr("data-valid","is-valid"):(o=!1,e.$el.attr("data-valid","is-invalid"))}),o||(n.preventDefault(),e.find(".js-error-msg").attr("hidden",!0),setTimeout(function(){e.find(".js-error-msg").removeAttr("hidden")},100))})})}(window,document,jQuery),t.exports=n["default"]},{}],13:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var s=e("../helpers/getHandlebarTemplate.js"),i=o(s);n["default"]=function(e,t,n,o){function s(e){var t={phoneFormatted:a(e.phone),faxFormatted:a(e.fax)};return Object.assign({},e,t)}function a(e){var t="1"===e[0]?e.substring(1):e;return t.replace(/(\d{3})(\d{3})(\d{4})/,"($1) $2-$3")}if(n(".js-google-map").length&&"undefined"!=typeof googleMapData){var r=(0,i["default"])("googleMapInfo");e.initMap=function(){n(".js-google-map").each(function(e){var t=n(this),o=googleMapData[e],i={scrollwheel:!1},a=Object.assign({},o.map,i),l=new google.maps.Map(this,a),u=[];o.markers.forEach(function(e,t){var n=Object.assign({map:l},e),o=new google.maps.Marker(n),i=s(n.infoWindow),a=r(i),d=new google.maps.InfoWindow({content:a});o.addListener("click",function(){d.open(l,o)}),o.showInfo=function(){d.open(l,o)},u.push(o)}),t.on("recenter",function(e,t){return"undefined"!=typeof u[t]&&(l.setCenter(u[t].getPosition()),void u[t].showInfo())})})};var l=t.createElement("script");l.src="//maps.googleapis.com/maps/api/js?key=AIzaSyC-WIoNfS6fh7TOtOqpDEgKST-W_NBebTk&callback=initMap",t.getElementsByTagName("head")[0].appendChild(l)}}(window,document,jQuery),t.exports=n["default"]},{"../helpers/getHandlebarTemplate.js":3}],14:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var s=e("../helpers/cookies.js"),i=o(s);n["default"]=function(e,t,n,o){n(".js-header-alert").each(function(){var e=n(this),t=e.find(".js-header-alert-link"),o=e.data("id"),s="Alert"+o,a=365,r=i["default"].getCookie(s);"hide"!==r&&e.fadeIn().fadeOut("fast").fadeIn("slow"),t.on("click",function(){i["default"].setCookie(s,"hide",a),e.stop(!0,!0).fadeOut()})})}(window,document,jQuery),t.exports=n["default"]},{"../helpers/cookies.js":1}],15:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=function(e,t,n,o){n(".js-keyword-search").each(function(){var e=n(this),t=e.find("form");t.on("submit",function(t){t.preventDefault(),e.addClass("is-dirty")}),t.on("reset",function(){e.removeClass("is-dirty")})})}(window,document,jQuery),t.exports=n["default"]},{}],16:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var s=e("../helpers/sticky.js"),i=o(s);n["default"]=function(e,t,n,o){n(".js-location-listing").each(function(){var e=n(this),t=e.find(".js-location-listing-map");i["default"].init(t),e.find(".js-location-listing-link").each(function(t){var o=n(this);o.on("click",function(o){o.preventDefault();var s=e.find(".js-google-map"),i=s.offset().top;s.trigger("recenter",t),n("html,body").stop(!0,!0).animate({scrollTop:i},"750")})})})}(window,document,jQuery),t.exports=n["default"]},{"../helpers/sticky.js":4}],17:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=function(e,t,n,o){var s=e.innerWidth;n(e).resize(function(){s=e.innerWidth}),n(".js-main-nav").each(function(){function e(e){n("body").removeClass(r),l.find("."+i).removeClass(i),s<=f?e.addClass(a):e.stop(!0,!0).slideUp("fast",function(){e.addClass(a).slideDown(0)})}function o(e){n("body").addClass(r),s<=f?e.addClass(i).removeClass(a):e.stop(!0,!0).delay(200).slideUp(0,function(){e.addClass(i).removeClass(a).slideDown("fast")})}var i="is-open",a="is-closed",r="show-submenu",l=n(this),u=l.find(".js-main-nav-toggle"),d=l.find(".js-main-nav-toggle, .js-main-nav-top-link"),c=null,f=800;d.on("keydown",function(a){if(!(s<=f)){var r=n(this),u=l.find(".ma__main-nav__top-link"),d=r.hasClass(i),c=l.find(".js-main-nav-content."+i),p=n(t.activeElement),v=p.parents(".ma__main-nav__item"),m=v.find(".ma__main-nav__top-link"),h=r.find(".ma__main-nav__subitem .ma__main-nav__link"),j=h.index(p),y=!!a.shiftKey;if(40===a.keyCode||9===a.keyCode&&!y)return a.preventDefault(),d?j===h.length-1?void 0:void(j===-1?h[1].focus():h[j+1].focus()):(o(v.find(".js-main-nav-content")),m.attr("aria-expanded","true"),r.addClass(i),void(h[1]&&h[1].focus()));if(38===a.keyCode||9===a.keyCode&&y)return a.preventDefault(),d?j<=1?(e(c),void m.focus().attr("aria-expanded","false")):void h[j-1].focus():(o(v.find(".js-main-nav-content")),m.focus().attr("aria-expanded","true"),void r.addClass(i));if(27===a.keyCode)return a.preventDefault(),e(c),r.removeClass(i),void m.focus().attr("aria-expanded","false");if(37===a.keyCode){a.preventDefault(),e(c),m.attr("aria-expanded","false");var g=u.index(m)-1;return void(u[g]&&u[g].focus())}if(39===a.keyCode){a.preventDefault(),e(c),m.attr("aria-expanded","false");var g=u.index(m)+1;return void(u[g]&&u[g].focus())}d||"undefined"!=typeof a.keycode&&9!==a.keycode}}),d.on("mouseenter",function(e){if(n(this).children("button").attr("aria-expanded","true"),s>f){var t=n(this).find(".js-main-nav-content");o(t)}}),d.on("mouseleave",function(t){if(n(this).children("button").attr("aria-expanded","false"),s>f){var o=n(this).find(".js-main-nav-content");e(o)}}),u.children("button, a").on("click",function(t){var a=n(this),r=n(this).parent(),u=r.find(".js-main-nav-content"),d=l.find(".js-main-nav-content."+i),c=u.hasClass(i);s<=f?(t.preventDefault(),r.addClass(i),o(u),a.attr("aria-expanded","true")):(e(d),a.attr("aria-expanded","false"),c||(o(u),a.attr("aria-expanded","true")))}),u.last().find(".js-main-nav-content li").last().find("a").on("keydown",function(t){if(t.stopPropagation(),9===t.keyCode&&16!==c){var n=l.find(".js-main-nav-content."+i);e(n)}c=t.keyCode}),n(".js-close-sub-nav").on("click",function(){var t=l.find(".js-main-nav-content."+i);e(t)}),n(".js-header-menu-button").click(function(){var t=l.find(".js-main-nav-content."+i);e(t)})})}(window,document,jQuery),t.exports=n["default"]},{}],18:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=function(e,t,n,o){n(".js-main-nav").each(function(){var e=n(this),t=e.find(".js-main-nav-toggle");t.children("a").on("click",function(e){e.preventDefault()}),e.find(".js-main-nav-top-link").find("a").on("click",function(){n(".js-header-menu-button").trigger("click")})})}(window,document,jQuery),t.exports=n["default"]},{}],19:[function(e,t,n){"use strict";var o=document.querySelector(".js-header-menu-button");null!==o&&o.addEventListener("click",function(e){e.preventDefault(),document.querySelector("body").classList.toggle("show-menu")});var s=document.querySelector(".js-header-search-menu .js-header-search-form");null!==s&&s.addEventListener("submit",function(e){window.innerWidth>620||(e.preventDefault(),document.querySelector("body").classList.toggle("show-menu"))})},{}],20:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=function(e,t,n,o){n(".js-ma-responsive-video").fitVids()}(window,document,jQuery),t.exports=n["default"]},{}],21:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=function(e,t,n,o){n(".js-ma-rich-text table").wrap("<div class='ma__rich-text__table-wrapper'></div>")}(window,document,jQuery),t.exports=n["default"]},{}],22:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var s=e("../helpers/cssControlCode.js"),i=o(s);n["default"]=function(e,t,n,o){n(".js-scroll-anchors").each(function(){function t(){var e=0;c=0,d=r.outerHeight(!0),p=l.offset().top,g=(0,i["default"])(r),l[0].hasAttribute("style")&&!g&&l.removeAttr("style"),g&&(c=n(".js-sticky-header").height()||0,p-=c,e=d),f=p+l.outerHeight(!0)-r.height(),j=new Array,u.each(function(t,o){var s=n(this),i=s.is("a")?s:s.find("a"),a=i[0].hash,r=n(a).offset()?n(a).offset().top-c-e:p;j[t]={hash:a,position:r},s.data("index",t)}),y=j.length}function s(){var t=n(e).scrollTop(),o=r.attr("data-sticky"),s="top"!==o&&t<=p,i="middle"!==o&&t<f&&t>p,a="bottom"!==o&&t>=f;l[0].hasAttribute("style")&&!g&&l.removeAttr("style"),!l[0].hasAttribute("style")&&g&&"middle"===o&&l.css({paddingTop:d}),s?(r.attr("data-sticky","top"),g&&l.removeAttr("style")):i?(r.attr("data-sticky","middle"),g&&l.css({paddingTop:d})):a&&(r.attr("data-sticky","bottom"),g&&l.removeAttr("style"))}function a(){if(!(y<2||k)){var t=n(e).scrollTop()+e.innerHeight/2,o=h;o>0&&t<j[h].position?--h:o<y-1&&t>j[h+1].position&&++h,o!==h&&(r.find("."+m).removeClass(m),u.eq(h).addClass(m))}}var r=n(this),l="relative"===r.parent().css("position")?r.parent():r.parent().offsetParent(),u=r.find(".js-scroll-anchors-link"),d=o,c=0,f=o,p=o,v=o,m="is-active",h=0,j=[],y=0,g=!1,k=!1;t(),r.attr("data-sticky","top"),e.setTimeout(function(){t()},1e3),u.on("click",function(e){if(e.preventDefault(),!r.hasClass("is-open")&&g)return void r.addClass("is-open");h=n(this).data("index");var t=j[h].position;r.removeClass("is-open"),r.find("."+m).removeClass(m),n(this).addClass(m),k=!0,n("html,body").stop(!0,!0).animate({scrollTop:t},"750",function(){k=!1;var e=j[h].hash;n(e).focus()})}),n(".js-accordion-link").on("click",function(){"number"==typeof v&&e.clearTimeout(v),v=e.setTimeout(function(){t(),s(),a()},400)}),r.find(".js-scroll-anchors-toggle").on("click",function(){r.toggleClass("is-open")}),n(e).resize(function(){"number"==typeof v&&e.clearTimeout(v),v=e.setTimeout(function(){t(),s(),a()},300)}),n(e).scroll(function(){s(),a()})})}(window,document,jQuery),t.exports=n["default"]},{"../helpers/cssControlCode.js":2}],23:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=function(e,t,n,o){n(".js-util-nav").each(function(){function e(e){n("body").removeClass(s),i.find("."+t).removeClass(t),e.removeClass(t).addClass(o),a&&clearTimeout(a),a=setTimeout(function(){e.attr("aria-hidden","true")},1e3)}var t="is-open",o="is-closed",s="show-utilmenu",i=n(this),a=null;n(".js-close-sub-nav").on("click",function(){var n=i.find(".js-util-nav-content."+t);e(n)}),i.find(".js-util-nav-toggle > a").on("click",function(a){a.preventdefault;var r=n(this).hasClass(t),l=n(this).next(".js-util-nav-content"),u=i.find(".js-util-nav-content."+t);e(u),r||(n(this).addClass(t),l.attr("aria-hidden","false"),setTimeout(function(){l.removeClass(o).addClass(t),n("body").addClass(s)},.1))}),i.find(".js-close-util-nav").on("click",function(t){t.preventDefault,e(n(this).closest(".js-util-nav-content"))}),n(".js-close-sub-nav").on("click",function(){var n=i.find(".js-util-nav-content."+t);e(n)})})}(window,document,jQuery),t.exports=n["default"]},{}]},{},[5]);

;
(function ($) {
  'use strict';

  // ---- begin formstack reset ------ //
  // see: https://github.com/base2arthur/bootstrap-the-formstack

  // Update select elements to match Mayflower
  $('select.fsField').each(function (el, i) {

    var $this = $(this);
    var $label = $this.siblings('label[for=" + $this.attr(\'id\') + "]');

    // add class to label
    $label.addClass('ma__select-box__label');

    // add class to field div container
    // $(this).parent().addClass('ma__feedback-form__type');

    // wrap label + input with section.ma__select-box.js-dropdown
    $this.add($label).wrapAll('<section class="ma__select-box js-dropdown"/>');

    // 1. add classes to the select element
    // 2. wrap select element with div.ma__select-box__field
    $(this).addClass('ma__select-box__select js-dropdown-select')
    .wrap('<div class="ma__select-box__field" />');

    // get the text value of the first option (used below)
    var firstOptionText = $(this).find('option').first().text();

    // create the div.ma__select-box__link + child spans,
    // this is what is rendered visually in place of the select
    $(this).after('<div class="ma__select-box__link">'
      + '<span class="js-dropdown-link">'
      + firstOptionText
      + '</span><span class="ma__select-box__icon"></span></div>');

  });

  $(document).on('change', 'select.js-dropdown-select', function (e) {
    $('.ma__select-box__link .js-dropdown-link').text(e.target.value);
  });


  // Map radio form elements to what Mayflower is expecting
  $('.fsOptionLabel > input[type="radio"]').each(function (el, i) {
    $(this)
      .parent().wrap('<span class="ma__input-radio" />');

    // move radio input out from parent label,
    // necessary for custom :before pseudoelement in scss
    $(this)
      .insertBefore($(this).parent());
  });

  // HOMEPAGE -- //
  $('#fsSubmit2504022').addClass('ma__feedback-form__controls');
  $('.fsPage textarea').attr('rows', 5);

  // MULTI FORM-- //
  $('#fs-go-back').css('display', 'none').attr('aria-hidden', 'true');
  $('.fsSubmitButton').addClass('ma__button ma__button--small');

  $('.fsForm').prepend('<hr align="left">');

  // MULTI FORM-- //
  $('#fs-go-back').css('display', 'none').attr('aria-hidden', 'true');
  $('.fsSubmitButton').addClass('ma__button ma__button--small');

})(jQuery);
;
/**
 * @file
 * Extends drupal view AJAX filtering functionality with accessible announcements.
 */
(function ($, Drupal) {
  'use strict';

  // @TODO: revisit and confirm this language.
  // See: https://jira.state.ma.us/browse/MASSGOV-1208
  var FILTERED_ANNOUNCEMENT = 'New content loaded. Now displaying a new set of filtered items.';

  Drupal.behaviors.ajaxViewsExt = {
    attach: function (context, settings) {
      // We hook off of the document-level view ajax event
      $(document).once('views-ajax').ajaxComplete(function (e, xhr, settings) {
        xhr.done(function () {
          Drupal.announce(
        Drupal.t(FILTERED_ANNOUNCEMENT)
      );
        });
      });
    }
  };
})(jQuery, Drupal);
;
(function ($) {
  'use strict';
  $('a[href]').click(function (e) {
    var href = $(this).attr('href');
    if (window.localStorage.noInterstitial && JSON.parse(window.localStorage.noInterstitial)) {
      return;
    }
    // regex to pass for a classic mass.gov link (portal and non-portal)
    var classicHrefRgx = /^((http(s)?:\/\/)?(www.)?mass.gov)\/(ago|anf|auditor|berkshireda|capeda|childadvocate|cjc|comptroller|courts|dor|dppc|edu|eea|elders|eohhs|eopss|essexda|essexsheriff|ethics|governor|hdc|hed|ig|informedma|lwd|massit|massworkforce|mcad|mdaa|mova|msa|mtrs|ocabr|osc|pca|perac|portal|recovery|srbtf|treasury|veterans|women|abcc|agr|bb|cgly|ClientsSecurityBoard|daplymouth|export|legis|norfolkda|opendata|better|obcbbo|smartplan)(\/.*)?$/i;

    if (href.match(classicHrefRgx)) {
      e.preventDefault();
      window.location = window.location.origin + '/leaving-pilot?continueURL=' + this.href;
    }
  });
})(jQuery);
;
(function() {
  var $buoop = {vs:{i:10,f:-4,o:-4,s:7,c:-4},unsecure:true,api:4};
  function $buo_f(){
   var e = document.createElement("script");
   e.src = "//browser-update.org/update.min.js";
   document.body.appendChild(e);
  };
  try {document.addEventListener("DOMContentLoaded", $buo_f,false)}
  catch(e){window.attachEvent("onload", $buo_f)}
})();
;
